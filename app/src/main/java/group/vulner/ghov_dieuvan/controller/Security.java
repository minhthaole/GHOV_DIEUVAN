package group.vulner.ghov_dieuvan.controller;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.util.Base64;
import android.util.Log;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * Created by sev_user on 7/8/2016.
 */
public class Security {

    public String md5(String s) {
        final String MD5 = "MD5";
        try {
            // Create MD5 Hash
            MessageDigest digest = MessageDigest
                    .getInstance(MD5);
            digest.update(s.getBytes());
            byte messageDigest[] = digest.digest();

            // Create Hex String
            StringBuilder hexString = new StringBuilder();
            for (byte aMessageDigest : messageDigest) {
                String h = Integer.toHexString(0xFF & aMessageDigest);
                while (h.length() < 2)
                    h = "0" + h;
                hexString.append(h);
            }
            return hexString.toString();

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return "";
    }

    private String keyAES = "";
    private String publicKey = "";

    /**
     * Use to encrypt data
     *
     * @param AESkey
     * @param data   plaintext data
     * @return encrypted data
     */
    public String encryptData(String AESkey, String data) {
        return data;
    }

    public String getKeyAES() {
        return keyAES;
    }

    public String getPublicKey() {
        return publicKey;
    }

    //=================================================================================================
    int next_01[][] = {{21, 0}, {0, 0}, {25, 2}, {0, 0}, {28, 19}, {18, 24}, {0, 0}, {2, 4}, {14, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 7}, {0, 16}, {27, 27}, {0, 0}, {14, 0}, {5, 0}, {21, 0}, {19, 23}, {0, 0}, {26, 17}, {0, 12}, {0, 28}, {22, 0}, {0, 8}, {4, 0}, {0, 5}, {7, 13}};
    char out_char_01[][] = {{'/', 'R'}, {'G', 'p'}, {'s', 'i'}, {'E', 'o'}, {'v', 'l'}, {'-', 't'}, {'Z', 'b'}, {'d', 'e'}, {'/', 'P'}, {'\\', 't'}, {'8', 'd'}, {'N', 'M'}, {'B', 'b'}, {'q', 'a'}, {'b', 'y'}, {'W', 'c'}, {'d', '['}, {'r', 'F'}, {'p', 'o'}, {'/', 's'}, {']', 'a'}, {'d', 'a'}, {'?', 'a'}, {':', 't'}, {'l', 'R'}, {'i', 'k'}, {'e', '9'}, {'X', 'y'}, {'/', 'e'}};
    int next_02[][] = {{0, 1}, {9, 8}, {10, 5}, {0, 0}, {2, 0}, {0, 0}, {4, 1}, {0, 0}, {6, 0}, {10, 0}, {2, 6}, {0, 0}};
    char out_char_02[][] = {{'1', '/'}, {'n', 'd'}, {'u', 'm'}, {'m', 'D'}, {'/', '>'}, {'s', '6'}, {'v', 'a'}, {'^', 'l'}, {'e', 'b'}, {'d', 'U'}, {'o', 'r'}, {'T', '>'}};

    /**
     * Funtion to genkey from next and out
     *
     * @param v:   init vector;
     * @param sz   size of output;
     * @param next : it is next_01;
     * @param out  : it is out_char_01;
     * @return a key is generated by input;
     * Example:
     * input : v=0x17bd4940 ;sz=29;next= next_01;out=out_char_01;
     * output:
     */
    private char[] mealy_machine(int v, int sz, int next[][], char out[][]) {
        char str[] = {'\0',};
        int state = 0, len = 0;

        if (sz > 100) {
            return null;
        }

        while (len < sz) {
            int input = 1 & v;
            v >>= 1;
            str[len++] = out[state][input];
            state = next[state][input];
        }
        str[len] = '\0';
        return str;
    }

    public String getKeyHash(Context context) {
        PackageInfo packageInfo;
        String key = null;
        try {
            //getting application package name, as defined in manifest
            String packageName = context.getApplicationContext().getPackageName();

            //Retriving package info
            packageInfo = context.getPackageManager().getPackageInfo(packageName,
                    PackageManager.GET_SIGNATURES);

            Log.i("Package Name=", context.getApplicationContext().getPackageName());

            for (Signature signature : packageInfo.signatures) {
                MessageDigest md = MessageDigest.getInstance("SHA");
                md.update(signature.toByteArray());
                key = new String(Base64.encode(md.digest(), 0));

                // String key = new String(Base64.encodeBytes(md.digest()));
                Log.i("Key Hash=", key);
            }
        } catch (PackageManager.NameNotFoundException e1) {
            Log.i("Name not found", e1.toString());
        } catch (NoSuchAlgorithmException e) {
            Log.i("No such an algorithm", e.toString());
        } catch (Exception e) {
            Log.i("Exception", e.toString());
        }

        return key;
    }

}
